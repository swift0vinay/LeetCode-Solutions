class Solution {
    int[] colors;
    public int minMalwareSpread(int[][] graph, int[] ar) {
        int n=graph.length;
        colors=new int[n];
        Arrays.fill(colors,-1);
        int c=0;
        
        for(int i=0;i<n;i++){
            if(colors[i]==-1){
                dfs(i,graph,c);
                ++c;
            }
        }
        
        int size[]=new int[c];
        for(int i=0;i<n;i++){
            size[colors[i]]++;    
        }
        
        int unique[]=new int[c];
        for(int node:ar){
            unique[colors[node]]++;
        }
        
        int ans=Integer.MAX_VALUE;
        for(int node:ar){
            int color=colors[node];
            if(unique[color]==1){
                if(ans==Integer.MAX_VALUE)
                    ans=node;
                else if(size[color]>size[colors[ans]])
                    ans=node;
                else if(size[color]==size[colors[ans]] && node<ans)
                    ans=node;
            }
        }
        if(ans==Integer.MAX_VALUE){
            for(int node:ar){
                ans=Math.min(ans,node);
            }
        }
        return ans;
    }
    
    void dfs(int src,int[][] graph,int c){
        colors[src]=c;
        for(int j=0;j<graph.length;j++){
            if(colors[j]==-1 && graph[src][j]==1){
                dfs(j,graph,c);
            }
        }
    }
}